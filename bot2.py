# bot.py
import telebot
from transformers import AutoTokenizer, AutoModelForCausalLM
import torch
import re

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
BOT_TOKEN = "8450391232:AAGtconwAu_Lig4gre6k05NJgXWukh6NIHU"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
MODEL_PATH = "./my_rugpt3_finetuned"

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–ï–õ–ò ====================
print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")

# –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
import warnings
warnings.filterwarnings("ignore")

try:
    tokenizer = AutoTokenizer.from_pretrained(MODEL_PATH)
    model = AutoModelForCausalLM.from_pretrained(MODEL_PATH)
    
    device = "cuda" if torch.cuda.is_available() else "cpu"
    model = model.to(device)
    model.eval()
    
    print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    exit(1)

# ==================== –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò ====================
def generate_response(question, max_length=150):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏
        prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {question}\n–°–∏—Å—Ç–µ–º–∞:"
        
        # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è
        inputs = tokenizer(
            prompt, 
            return_tensors="pt", 
            max_length=512, 
            truncation=True
        ).to(device)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        with torch.no_grad():
            outputs = model.generate(
                inputs.input_ids,
                max_length=len(inputs.input_ids[0]) + max_length,
                num_return_sequences=1,
                temperature=0.7,
                do_sample=True,
                pad_token_id=tokenizer.eos_token_id,
                repetition_penalty=1.1,
                top_p=0.9,
            )
        
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã
        if "–°–∏—Å—Ç–µ–º–∞:" in generated_text:
            response = generated_text.split("–°–∏—Å—Ç–µ–º–∞:")[1].strip()
        else:
            response = generated_text.replace(prompt, "").strip()
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
        if not response.endswith(('.', '!', '?')):
            response += '.'
        
        return response
        
    except Exception as e:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

# ==================== –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢ ====================
print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç —Ç–µ—Ö–Ω–∏–∫—É–º–∞!

–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ:
‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–µ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–µ
‚Ä¢ –£—á–µ–±–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
‚Ä¢ –ë–∏–±–ª–∏–æ—Ç–µ–∫–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!

–ü—Ä–∏–º–µ—Ä—ã:
- "–ö–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —é—Ä–∏—Å—Ç?"
- "–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏—Å—å –Ω–∞ –¥—Ä—É–≥—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å?"
- "–ö–∞–∫–∏–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑—É—á–∞—é—Ç?"
    """
    bot.reply_to(message, welcome_text)

@bot.message_handler(commands=['status'])
def send_status(message):
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    status_text = f"""
üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:
‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}
‚Ä¢ –ú–æ–¥–µ–ª—å: RuGPT3 (–¥–æ–æ–±—É—á–µ–Ω–Ω–∞—è)
‚Ä¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω ‚úÖ
    """
    bot.reply_to(message, status_text)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        bot.send_chat_action(message.chat.id, 'typing')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = generate_response(message.text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(message, response)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        user = message.from_user.username or message.from_user.first_name
        print(f"üë§ {user}: {message.text[:50]}...")
        print(f"ü§ñ –ë–æ—Ç: {response[:50]}...")
        print("-" * 50)
        
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
if __name__ == "__main__":
    print("=" * 40)
    print("üöÄ –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢ –ó–ê–ü–£–©–ï–ù")
    print(f"üìç –ú–æ–¥–µ–ª—å: {MODEL_PATH}")
    print(f"‚öôÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    print("üì± –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    print("=" * 40)
    
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê: —É–±—Ä–∞–ª long_pending
        bot.infinity_polling(timeout=60, long_polling_timeout=30)
        
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
